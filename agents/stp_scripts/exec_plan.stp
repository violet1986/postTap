#!/usr/bin/env stap
// A long existing stap script to get plan node when a query start

function parse_planstate:string (planstate:long, left:long, right:long, plan:long) {
    return sprintf("type:%d,leftplan:%p,rightplan:%p,plan_rows:%p,instrument:%p", user_int(planstate), left, right, user_long(plan+24), user_long(planstate+24)) 
}

global map_node
probe process("/usr/local/pgsql/bin/postgres").function("ExecutePlan").call
{
    lpid = pid()
    planstate_root = long_arg(2)
    
    current_index = 0
    map_node[lpid, current_index++] = planstate_root
    while ((lpid, current_index-1) in map_node) {
        current_node = map_node[lpid, current_index-1]
        left = user_long(current_node+56)
        right = user_long(current_node+64)
        plan = user_long(current_node+8)
        printdln("|", lpid, "GenerateNode", parse_planstate(current_node, left, right, plan))
        delete map_node[lpid, current_index--]
        
        if (right != 0) {
            map_node[lpid, current_index++] = right
        }
        if (left != 0) {
            map_node[lpid, current_index++] = left
        }
    }
}

probe process("/usr/local/pgsql/bin/postgres").function("ExecutorFinish").call 
{ 
    printdln("|", pid(), ppfunc())
}
probe process("/usr/local/pgsql/bin/postgres").function("CreateQueryDesc").call   
{
    printdln("|", pid(), ppfunc())
}
probe process("/usr/local/pgsql/bin/postgres").function("StatementCancelHandler").call   
{
    printdln("|", pid(), ppfunc())
}
